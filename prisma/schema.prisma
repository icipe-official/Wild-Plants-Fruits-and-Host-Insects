generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model fruit_colors {
  color_id            Int                   @id @default(autoincrement())
  color               String                @unique @db.VarChar(20)
  plants_fruit_colors plants_fruit_colors[]
}

model fruit_shapes {
  fruit_shape_id          Int                   @id @default(autoincrement())
  shape                   String                @unique @db.VarChar(20)
  fruit_shape_description String?               @db.VarChar
  plants_fruit_shapes     plants_fruit_shapes[]
}

model fruit_sizes {
  id                 Int                  @id @default(autoincrement())
  size               String               @unique @db.VarChar(15)
  plants_fruit_sizes plants_fruit_sizes[]
}

model fruit_types {
  fruit_type_id          Int                    @id @default(autoincrement())
  type_of_fruit          String                 @unique @db.VarChar(50)
  fruit_type_description String?                @db.VarChar
  fruit_types_glossary   fruit_types_glossary[]
  plants_fruit_types     plants_fruit_types[]
}

model fruit_types_glossary {
  fruit_id    Int
  photo_id    String      @unique @db.VarChar(10)
  fruit_types fruit_types @relation(fields: [fruit_id], references: [fruit_type_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([fruit_id, photo_id])
}

model fruiting_months {
  fruiting_month_id      Int                      @id @default(autoincrement())
  month                  String                   @unique @db.VarChar(10)
  plants_fruiting_months plants_fruiting_months[]
}

model glossary {
  glossary_id          Int               @id
  glossary_type        String?           @db.VarChar(50)
  glossary_term        String?           @db.VarChar(50)
  glossary_description String?           @db.VarChar(500)
  glossary_photos      glossary_photos[]
}

model glossary_photos {
  glossary_id   Int
  photo_id      Int
  glossary      glossary      @relation(fields: [glossary_id], references: [glossary_id], onDelete: NoAction, onUpdate: NoAction)
  plants_photos plants_photos @relation(fields: [photo_id], references: [photo_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([photo_id, glossary_id])
}

model insect_families {
  id          Int       @id @default(autoincrement())
  family_name String?   @unique @db.VarChar(50)
  insects     insects[]
}

model insect_genera {
  id         Int       @id @default(autoincrement())
  genus_name String?   @unique @db.VarChar(50)
  insects    insects[]
}

model insect_orders {
  id         Int       @id @default(autoincrement())
  order_name String    @unique @db.VarChar(20)
  insects    insects[]
}

model insect_photos {
  insect_id Int
  photo_id  String  @unique @db.VarChar(10)
  sex       String? @db.VarChar(30)
  insects   insects @relation(fields: [insect_id], references: [id], onDelete: Cascade)

  @@id([insect_id, photo_id])
}

model insect_sub_families {
  id              Int       @id @default(autoincrement())
  sub_family_name String?   @unique @db.VarChar(50)
  insects         insects[]
}

model insects {
  id                  Int                  @id @default(autoincrement())
  unique_code         String?              @unique @db.VarChar(30)
  species_name        String?              @db.VarChar(100)
  genus_id            Int?
  sub_family_id       Int?
  family_id           Int?
  order_id            Int?
  insect_photos       insect_photos[]
  insect_families     insect_families?     @relation(fields: [family_id], references: [id], onDelete: Cascade)
  insect_genera       insect_genera?       @relation(fields: [genus_id], references: [id], onDelete: Cascade)
  insect_orders       insect_orders?       @relation(fields: [order_id], references: [id], onDelete: Cascade)
  insect_sub_families insect_sub_families? @relation(fields: [sub_family_id], references: [id], onDelete: Cascade)
  insects_coi         insects_coi[]
  insects_regions     insects_regions[]
  plants_insects      plants_insects[]
}

model insects_coi {
  coi_id            Int      @id
  insect_id         Int?
  country           String?  @db.VarChar
  genebank_accesion String?  @db.VarChar
  nucleotide        String?  @db.VarChar
  insects           insects? @relation(fields: [insect_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model insects_regions {
  insect_id Int
  region_id Int
  insects   insects @relation(fields: [insect_id], references: [id], onDelete: Cascade)
  regions   regions @relation(fields: [region_id], references: [id], onDelete: Cascade)

  @@id([insect_id, region_id])
}

model k_sectors {
  k_sector_id      Int                @id @default(autoincrement())
  sector           String             @db.VarChar(10)
  plants_k_sectors plants_k_sectors[]
}

model latex {
  fruit_latex_id    Int            @id @default(autoincrement())
  latex_description String         @unique @db.VarChar(10)
  plants_latex      plants_latex[]
}

model leaf_arrangements {
  leaf_arrangement_id      Int                        @id @default(autoincrement())
  arrangement              String                     @unique @db.VarChar(20)
  plants_leaf_arrangements plants_leaf_arrangements[]
}

model leaf_margins {
  leaf_margin_id      Int                   @id @default(autoincrement())
  type_of_leaf_margin String                @unique @db.VarChar(20)
  plants_leaf_margins plants_leaf_margins[]
}

model plant_families {
  id           Int            @id @default(autoincrement())
  family_name  String         @unique @db.VarChar(50)
  plant_genera plant_genera[]
}

model plant_families_newick {
  id          Int     @id
  family_name String? @db.VarChar(50)
  matk_newick String? @db.VarChar
}

model plant_genera {
  id             Int            @id @default(autoincrement())
  genus_name     String         @unique @db.VarChar(50)
  family_id      Int
  plant_families plant_families @relation(fields: [family_id], references: [id], onDelete: Cascade)
  plants         plants[]
}

model plants {
  id                       Int                        @id @default(autoincrement())
  species_name             String?                    @db.VarChar(110)
  leaf_type                String?                    @db.VarChar(50)
  plant_description        String?                    @db.VarChar
  max_latitude             Int?
  min_latitude             Int?
  genus_id                 Int
  rbcl                     String?                    @db.VarChar
  matk                     String?                    @db.VarChar
  plant_genera             plant_genera               @relation(fields: [genus_id], references: [id], onDelete: Cascade)
  plants_fruit_colors      plants_fruit_colors[]
  plants_fruit_shapes      plants_fruit_shapes[]
  plants_fruit_sizes       plants_fruit_sizes[]
  plants_fruit_types       plants_fruit_types[]
  plants_fruiting_months   plants_fruiting_months[]
  plants_insects           plants_insects[]
  plants_k_sectors         plants_k_sectors[]
  plants_latex             plants_latex[]
  plants_leaf_arrangements plants_leaf_arrangements[]
  plants_leaf_margins      plants_leaf_margins[]
  plants_matk              plants_matk[]
  plants_photos            plants_photos[]
  plants_rbcl              plants_rbcl[]
  plants_regions           plants_regions[]
  plants_shrub_climbings   plants_shrub_climbings[]
  plants_spines_thorns     plants_spines_thorns[]
  plants_ukwf_areas        plants_ukwf_areas[]
  plants_woody_herbaceous  plants_woody_herbaceous[]
}

model plants_fruit_colors {
  plant_id     Int
  color_id     Int
  fruit_colors fruit_colors @relation(fields: [color_id], references: [color_id], onDelete: Cascade)
  plants       plants       @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, color_id])
}

model plants_fruit_shapes {
  plant_id       Int
  fruit_shape_id Int
  fruit_shapes   fruit_shapes @relation(fields: [fruit_shape_id], references: [fruit_shape_id], onDelete: Cascade)
  plants         plants       @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, fruit_shape_id])
}

model plants_fruit_sizes {
  plant_id      Int
  fruit_size_id Int
  fruit_sizes   fruit_sizes @relation(fields: [fruit_size_id], references: [id], onDelete: Cascade)
  plants        plants      @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, fruit_size_id])
}

model plants_fruit_types {
  plant_id      Int
  fruit_type_id Int
  fruit_types   fruit_types @relation(fields: [fruit_type_id], references: [fruit_type_id], onDelete: Cascade)
  plants        plants      @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, fruit_type_id])
}

model plants_fruiting_months {
  plant_id          Int
  fruiting_month_id Int
  fruiting_months   fruiting_months @relation(fields: [fruiting_month_id], references: [fruiting_month_id], onDelete: Cascade)
  plants            plants          @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, fruiting_month_id])
}

model plants_insects {
  plant_id  Int
  insect_id Int
  insects   insects @relation(fields: [insect_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_insects_regions_regions")
  plants    plants  @relation(fields: [plant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_plants_insects_plant")

  @@id([plant_id, insect_id])
}

model plants_k_sectors {
  plant_id    Int
  k_sector_id Int
  k_sectors   k_sectors @relation(fields: [k_sector_id], references: [k_sector_id], onDelete: Cascade)
  plants      plants    @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, k_sector_id])
}

model plants_latex {
  plant_id       Int
  fruit_latex_id Int
  latex          latex  @relation(fields: [fruit_latex_id], references: [fruit_latex_id], onDelete: Cascade)
  plants         plants @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, fruit_latex_id])
}

model plants_leaf_arrangements {
  plant_id            Int
  leaf_arrangement_id Int
  leaf_arrangements   leaf_arrangements @relation(fields: [leaf_arrangement_id], references: [leaf_arrangement_id], onDelete: Cascade)
  plants              plants            @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, leaf_arrangement_id])
}

model plants_leaf_margins {
  plant_id       Int
  leaf_margin_id Int
  leaf_margins   leaf_margins @relation(fields: [leaf_margin_id], references: [leaf_margin_id], onDelete: Cascade)
  plants         plants       @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, leaf_margin_id])
}

model plants_matk {
  matk_id            Int     @id
  plant_id           Int?
  nucleotide         String? @db.VarChar
  country            String? @db.VarChar
  genebank_accession String? @db.VarChar
  plants             plants? @relation(fields: [plant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model plants_photos {
  plant_id        Int
  photo_id        Int               @unique
  photo_name      String            @unique @db.VarChar(10)
  glossary_photos glossary_photos[]
  plants          plants            @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, photo_id])
}

model plants_rbcl {
  rbcl_id           Int     @id
  plant_id          Int?
  nucleotide        String? @db.VarChar
  country           String? @db.VarChar
  genebank_accesion String? @db.VarChar
  plants            plants? @relation(fields: [plant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model plants_regions {
  plants_id Int
  region_id Int
  plants    plants  @relation(fields: [plants_id], references: [id], onDelete: Cascade)
  regions   regions @relation(fields: [region_id], references: [id], onDelete: Cascade)

  @@id([plants_id, region_id])
}

model plants_shrub_climbings {
  plant_id        Int
  shrub_id        Int
  plants          plants          @relation(fields: [plant_id], references: [id], onDelete: Cascade)
  shrub_climbings shrub_climbings @relation(fields: [shrub_id], references: [id], onDelete: Cascade)

  @@id([plant_id, shrub_id])
}

model plants_spines_thorns {
  plant_id      Int
  thorn_id      Int
  plants        plants        @relation(fields: [plant_id], references: [id], onDelete: Cascade)
  spines_thorns spines_thorns @relation(fields: [thorn_id], references: [thorn_id], onDelete: Cascade)

  @@id([plant_id, thorn_id])
}

model plants_ukwf_areas {
  plant_id     Int
  ukwf_area_id Int
  plants       plants     @relation(fields: [plant_id], references: [id], onDelete: Cascade)
  ukwf_areas   ukwf_areas @relation(fields: [ukwf_area_id], references: [ukwf_area_id], onDelete: Cascade)

  @@id([plant_id, ukwf_area_id])
}

model plants_woody_herbaceous {
  plant_id         Int
  back_id          Int
  woody_herbaceous woody_herbaceous @relation(fields: [back_id], references: [id], onDelete: Cascade)
  plants           plants           @relation(fields: [plant_id], references: [id], onDelete: Cascade)

  @@id([plant_id, back_id])
}

model regions {
  id              Int               @id @default(autoincrement())
  region          String            @db.VarChar(50)
  latitude        String?           @db.VarChar(10)
  longitude       String?           @db.VarChar(10)
  insects_regions insects_regions[]
  plants_regions  plants_regions[]
}

model shrub_climbings {
  id                     Int                      @id @default(autoincrement())
  tree_type              String                   @unique @db.VarChar(10)
  plants_shrub_climbings plants_shrub_climbings[]
}

model spines_thorns {
  thorn_id             Int                    @id @default(autoincrement())
  thorns_spines        String                 @unique @db.VarChar(10)
  plants_spines_thorns plants_spines_thorns[]
}

model ukwf_areas {
  ukwf_area_id      Int                 @id @default(autoincrement())
  ukwf_area         String              @db.VarChar(10)
  plants_ukwf_areas plants_ukwf_areas[]
}

model woody_herbaceous {
  id                      Int                       @id @default(autoincrement())
  type_of_stem            String                    @unique @db.VarChar(10)
  plants_woody_herbaceous plants_woody_herbaceous[]
}
